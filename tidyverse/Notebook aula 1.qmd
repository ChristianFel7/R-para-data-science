---
title: "Aula 1"
format: pdf
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

Instalando a biblioteca do Tidyverse:

```{r}
install.packages("tidyverse")
```

Carregando os pacotes do Tidyverse:

```{r}
library(tidyverse)
```

Importando o arquivo de pedidos:

```{r}
pedidos <- read_csv("Pedidos_Hermex_Log.csv", show_col_types = FALSE)
```

```{r}
head(pedidos)
```

Selecionando as colunas de PedidoID e Status:

```{r}
pedidos %>%
  select(PedidoID, Status)
```

Selecionando colunas que começam com o termo "Data":

```{r}
pedidos %>%
  select(starts_with("Data"))
```

Filtrando pedidos no intervalo do dia 01/07 até 01/08:

```{r}
pedidos %>%
  filter(DataPedido >= as.Date("2024-07-01") & DataPedido <= as.Date("2024-08-01"))
```

Filtrando os pedidos no intervalo do dia 01/07 até 01/08 que estão pendentes ou em trânsito:

```{r}
pedidos %>%
  filter(DataPedido >= as.Date("2024-07-01") & DataPedido <= as.Date("2024-08-01"), Status == "Em trânsito" | Status == "Pendente")
```

```{r}
pedidos %>% 
  mutate(beneficios = ifelse(ValorTotal >=2000, "Liberado", "Não Liberado"))
```

```{r}
pedidos %>% 
  mutate(TransportadorID = ifelse(is.na(TransportadorID), "particular", TransportadorID))
```

```{r}
pedidos %>% 
  mutate(DataPedido = as.Date(DataPedido),
         DataEntrega = as.Date(DataEntrega),
         TempoEntrega = as.numeric(difftime(DataEntrega, DataPedido, units = "days")))
```

```{r}
pedidos %>% 
  mutate(DataPedido = as.Date(DataPedido),
         DataEntrega = as.Date(DataEntrega),
         TempoEntrega = as.numeric(difftime(DataEntrega, DataPedido, units = "days")))%>%
  summarize(MediaTempoEntrega = mean(TempoEntrega, na.rm = TRUE))
```

```{r}
percentual_pedidor_por_regiao <- pedidos %>%
  group_by(Regiao)%>%
  summarize(QuantidadePedidos = n()) %>%
  mutate(percentual = (QuantidadePedidos / sum(QuantidadePedidos))*100 )

(percentual_pedidor_por_regiao)
```

```{r}
pedidos <- pedidos %>%
  pivot_longer(cols = c(DataPedido, DataEntrega),
               names_to = "TipoData",
               values_to = "Data")

head(pedidos)
```

```{r}
pedidos <- pedidos %>%
  separate(Data, into = c("Data", "Horario"), sep = " ")

```

```{r}
pedidos <- pedidos %>%
  mutate(CEP = str_extract(EnderecoPedido, "\\d{5}-\\d{3}"))
head(pedidos)
```

```{r}
str(pedidos)
```

```{r}
pedidos$Data <- ymd(pedidos$Data)
```

```{r}
percentual_pedidor_por_regiao
```

```{r}
grafico <- ggplot(percentual_pedidor_por_regiao, aes(x= Regiao, y = percentual, fill = Regiao))+
  geom_bar(stat = "identity")+
  labs(title = "Porcentagem de Pedidos por Região",
       x = "Região",
       y = "Percentual(%)")+
  theme_minimal()
```

```{r}
print(grafico)
```

```{r}
write.csv(pedidos, "Pedidos_Hermex_Log_atualizado.csv")
```
